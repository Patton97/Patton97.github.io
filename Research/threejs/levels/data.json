{
  "tiles":
  [
    { "name": "Grass", "safe":false},
    { "name": "RoadVertical",   "safe":true},
    { "name": "RoadHorizontal", "safe":true},
    { "name": "RoadCross",      "safe":true},
    { "name": "RoadCornerTL",   "safe":true},
    { "name": "RoadCornerTR",   "safe":true},
    { "name": "RoadCornerBR",   "safe":true},
    { "name": "RoadCornerBL",   "safe":true},
    { "name": "RoadEndTop",     "safe":true},
    { "name": "RoadEndRight",   "safe":true},
    { "name": "RoadEndBottom",  "safe":true},
    { "name": "RoadEndLeft",    "safe":true}
  ],
  "levels":
  [
    {
      "startingPos": { "x": 0, "y": 0 },
      "startingDir": { "x": 0, "y": -1 },
      "destinationPos" : { "x": 2, "y": 2 },
      "grid":
      [
        [4,2,2,2,5],
        [1,0,1,0,1],
        [1,2,3,2,1],
        [1,0,1,0,1],
        [7,2,2,2,6]
      ],
      "description": "This level is a fun sanbox for you to play around in."
    },
    {
      "startingPos": { "x": 0, "y": 2 },
      "startingDir": { "x": 1, "y": 0 },
      "destinationPos" : { "x": 4, "y": 0 },
      "grid":
      [
        [ 0, 0, 0, 0, 8],
        [ 0, 0, 0, 0, 1],
        [11, 2, 2, 2, 6],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ],
      "description": "Let's get moving! <br><br> Your task is to reach the gold star. Drag in blocks from the left hand side to give your robot instructions. Once you're ready, hit the green play button!"
    },
    {
      "startingPos": { "x": 0, "y": 2 },
      "startingDir": { "x": 1, "y": 0 },
      "destinationPos" : { "x": 4, "y": 0 },
      "grid":
      [
        [ 0, 0, 0, 0, 8],
        [ 0, 0, 0, 0, 1],
        [11, 2, 2, 2, 6],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ],
      "description": "Loop-de-loop! <br><br> In programming, loops allow us to save time and avoid repetition. Rather than dragging the \"move forward\" block mupltiple times, try putting it inside a green \"repeat (X) times\" block"
    },
    {
      "startingPos": { "x": 0, "y": 2 },
      "startingDir": { "x": 1, "y": 0 },
      "destinationPos" : { "x": 4, "y": 2 },
      "grid":
      [
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [11, 2, 2, 2, 9],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ],
      "description": "Different types of loops <br><br> Sometimes we don't know exactly how many times we want to repeat our loop. This new block \"repeat until ‚≠ê\" will loop until you reach the star, give it a try."
    },
    {
      "startingPos": { "x": 0, "y": 4 },
      "startingDir": { "x": 1, "y": 0 },
      "destinationPos" : { "x": 4, "y": 0 },
      "grid":
      [
        [ 0, 0, 0, 0, 8],
        [ 0, 0, 0, 4, 6],
        [ 0, 0, 4, 6, 0],
        [ 0, 4, 6, 0, 0],
        [11, 6, 0, 0, 0]
      ],
      "description": "Puzzle time! <br><br> Using your new knowledge of loops, try to navigate this puzzle to reach the star. You can use either type of loop to solve this problem, so I've left that decision up to you."
    },
    {
      "startingPos": { "x": 2, "y": 0 },
      "startingDir": { "x": 1, "y": 0 },
      "destinationPos" : { "x": 2, "y": 4 },
      "grid":
      [
        [ 0, 0,11, 2, 5],
        [ 0, 0, 0, 0, 1],
        [ 4, 2, 2, 2, 6],
        [ 1, 0, 0, 0, 0],
        [ 7, 2, 9, 0, 0]
      ],
      "description": "Conditionals <br><br> We don't always want every piece of code to run. To control this, we can use \"conditonals\", or \"if statements\". By placing code inside these statements, we ensure it is only run if the condition is met. Try to navigate this level using a combination of loops and conditionals."
    }
  ]
}